// auto generated by struct_info_parser.py, please DO NOT edit!!!

#ifndef LONGFIST_UTILS_H
#define LONGFIST_UTILS_H

#include "LFDataStruct.h"

#include <string>

inline std::string getExchangeName(short exchange_id)
{
	switch(exchange_id)
	{
		case 2: // 深圳证券交易所
			return "SZE";
		case 11: // 中国金融期货交易所
			return "CFFEX";
		case 1: // 上海证券交易所
			return "SSE";
		case 13: // 大连商品交易所
			return "DCE";
		case 12: // 上海期货交易所
			return "SHFE";
		case 14: // 郑州商品交易所
			return "CZCE";
	}
}

inline int getExchangeId(std::string exchange_name)
{
	if (exchange_name.compare("SZE") == 0 || exchange_name.compare("sze") == 0) //深圳证券交易所
		return 2;
	if (exchange_name.compare("CFFEX") == 0 || exchange_name.compare("cffex") == 0) //中国金融期货交易所
		return 11;
	if (exchange_name.compare("SSE") == 0 || exchange_name.compare("sse") == 0) //上海证券交易所
		return 1;
	if (exchange_name.compare("DCE") == 0 || exchange_name.compare("dce") == 0) //大连商品交易所
		return 13;
	if (exchange_name.compare("SHFE") == 0 || exchange_name.compare("shfe") == 0) //上海期货交易所
		return 12;
	if (exchange_name.compare("CZCE") == 0 || exchange_name.compare("czce") == 0) //郑州商品交易所
		return 14;
	return -1;
}

typedef std::pair<std::string, std::string> JournalPair;

inline JournalPair getMdJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/MD/LTS/", "MD_LTS"};
		case 6:
			return {"/shared/kungfu/journal/MD/XELE/", "MD_XELE"};
		case 1:
			return {"/shared/kungfu/journal/MD/CTP/", "MD_CTP"};
		case 5:
			return {"/shared/kungfu/journal/MD/XSPEED/", "MD_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/MD/OES/", "MD_OES"};
		case 8:
			return {"/shared/kungfu/journal/MD/YISHENG/", "MD_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/MD/SOCKETSNIFFER/", "MD_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/MD/XONE/", "MD_XONE"};
		case 14:
			return {"/shared/kungfu/journal/MD/SANDBOX/", "MD_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/MD/HUNDSUN/", "MD_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/MD/XSPEEDL2/", "MD_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/MD/FEMAS/", "MD_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/MD/EXANICSNIFFER/", "MD_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getMdRawJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/MD_RAW/LTS/", "MDRAW_LTS"};
		case 6:
			return {"/shared/kungfu/journal/MD_RAW/XELE/", "MDRAW_XELE"};
		case 1:
			return {"/shared/kungfu/journal/MD_RAW/CTP/", "MDRAW_CTP"};
		case 5:
			return {"/shared/kungfu/journal/MD_RAW/XSPEED/", "MDRAW_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/MD_RAW/OES/", "MDRAW_OES"};
		case 8:
			return {"/shared/kungfu/journal/MD_RAW/YISHENG/", "MDRAW_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/MD_RAW/SOCKETSNIFFER/", "MDRAW_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/MD_RAW/XONE/", "MDRAW_XONE"};
		case 14:
			return {"/shared/kungfu/journal/MD_RAW/SANDBOX/", "MDRAW_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/MD_RAW/HUNDSUN/", "MDRAW_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/MD_RAW/XSPEEDL2/", "MDRAW_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/MD_RAW/FEMAS/", "MDRAW_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/MD_RAW/EXANICSNIFFER/", "MDRAW_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getTdJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/TD/LTS/", "TD_LTS"};
		case 6:
			return {"/shared/kungfu/journal/TD/XELE/", "TD_XELE"};
		case 1:
			return {"/shared/kungfu/journal/TD/CTP/", "TD_CTP"};
		case 5:
			return {"/shared/kungfu/journal/TD/XSPEED/", "TD_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/TD/OES/", "TD_OES"};
		case 8:
			return {"/shared/kungfu/journal/TD/YISHENG/", "TD_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/TD/SOCKETSNIFFER/", "TD_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/TD/XONE/", "TD_XONE"};
		case 14:
			return {"/shared/kungfu/journal/TD/SANDBOX/", "TD_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/TD/HUNDSUN/", "TD_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/TD/XSPEEDL2/", "TD_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/TD/FEMAS/", "TD_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/TD/EXANICSNIFFER/", "TD_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getTdSendJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/TD_SEND/LTS/", "TD_SEND_LTS"};
		case 6:
			return {"/shared/kungfu/journal/TD_SEND/XELE/", "TD_SEND_XELE"};
		case 1:
			return {"/shared/kungfu/journal/TD_SEND/CTP/", "TD_SEND_CTP"};
		case 5:
			return {"/shared/kungfu/journal/TD_SEND/XSPEED/", "TD_SEND_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/TD_SEND/OES/", "TD_SEND_OES"};
		case 8:
			return {"/shared/kungfu/journal/TD_SEND/YISHENG/", "TD_SEND_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/TD_SEND/SOCKETSNIFFER/", "TD_SEND_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/TD_SEND/XONE/", "TD_SEND_XONE"};
		case 14:
			return {"/shared/kungfu/journal/TD_SEND/SANDBOX/", "TD_SEND_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/TD_SEND/HUNDSUN/", "TD_SEND_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/TD_SEND/XSPEEDL2/", "TD_SEND_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/TD_SEND/FEMAS/", "TD_SEND_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/TD_SEND/EXANICSNIFFER/", "TD_SEND_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getTdRawJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/TD_RAW/LTS/", "TD_RAW_LTS"};
		case 6:
			return {"/shared/kungfu/journal/TD_RAW/XELE/", "TD_RAW_XELE"};
		case 1:
			return {"/shared/kungfu/journal/TD_RAW/CTP/", "TD_RAW_CTP"};
		case 5:
			return {"/shared/kungfu/journal/TD_RAW/XSPEED/", "TD_RAW_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/TD_RAW/OES/", "TD_RAW_OES"};
		case 8:
			return {"/shared/kungfu/journal/TD_RAW/YISHENG/", "TD_RAW_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/TD_RAW/SOCKETSNIFFER/", "TD_RAW_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/TD_RAW/XONE/", "TD_RAW_XONE"};
		case 14:
			return {"/shared/kungfu/journal/TD_RAW/SANDBOX/", "TD_RAW_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/TD_RAW/HUNDSUN/", "TD_RAW_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/TD_RAW/XSPEEDL2/", "TD_RAW_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/TD_RAW/FEMAS/", "TD_RAW_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/TD_RAW/EXANICSNIFFER/", "TD_RAW_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getTdQJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/TD_Q/LTS/", "TD_Q_LTS"};
		case 6:
			return {"/shared/kungfu/journal/TD_Q/XELE/", "TD_Q_XELE"};
		case 1:
			return {"/shared/kungfu/journal/TD_Q/CTP/", "TD_Q_CTP"};
		case 5:
			return {"/shared/kungfu/journal/TD_Q/XSPEED/", "TD_Q_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/TD_Q/OES/", "TD_Q_OES"};
		case 8:
			return {"/shared/kungfu/journal/TD_Q/YISHENG/", "TD_Q_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/TD_Q/SOCKETSNIFFER/", "TD_Q_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/TD_Q/XONE/", "TD_Q_XONE"};
		case 14:
			return {"/shared/kungfu/journal/TD_Q/SANDBOX/", "TD_Q_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/TD_Q/HUNDSUN/", "TD_Q_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/TD_Q/XSPEEDL2/", "TD_Q_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/TD_Q/FEMAS/", "TD_Q_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/TD_Q/EXANICSNIFFER/", "TD_Q_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getL2MdJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/L2MD/LTS/", "L2MD_LTS"};
		case 6:
			return {"/shared/kungfu/journal/L2MD/XELE/", "L2MD_XELE"};
		case 1:
			return {"/shared/kungfu/journal/L2MD/CTP/", "L2MD_CTP"};
		case 5:
			return {"/shared/kungfu/journal/L2MD/XSPEED/", "L2MD_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/L2MD/OES/", "L2MD_OES"};
		case 8:
			return {"/shared/kungfu/journal/L2MD/YISHENG/", "L2MD_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/L2MD/SOCKETSNIFFER/", "L2MD_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/L2MD/XONE/", "L2MD_XONE"};
		case 14:
			return {"/shared/kungfu/journal/L2MD/SANDBOX/", "L2MD_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/L2MD/HUNDSUN/", "L2MD_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/L2MD/XSPEEDL2/", "L2MD_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/L2MD/FEMAS/", "L2MD_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/L2MD/EXANICSNIFFER/", "L2MD_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getL2MdRawJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/L2MD_RAW/LTS/", "L2MD_RAW_LTS"};
		case 6:
			return {"/shared/kungfu/journal/L2MD_RAW/XELE/", "L2MD_RAW_XELE"};
		case 1:
			return {"/shared/kungfu/journal/L2MD_RAW/CTP/", "L2MD_RAW_CTP"};
		case 5:
			return {"/shared/kungfu/journal/L2MD_RAW/XSPEED/", "L2MD_RAW_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/L2MD_RAW/OES/", "L2MD_RAW_OES"};
		case 8:
			return {"/shared/kungfu/journal/L2MD_RAW/YISHENG/", "L2MD_RAW_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/L2MD_RAW/SOCKETSNIFFER/", "L2MD_RAW_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/L2MD_RAW/XONE/", "L2MD_RAW_XONE"};
		case 14:
			return {"/shared/kungfu/journal/L2MD_RAW/SANDBOX/", "L2MD_RAW_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/L2MD_RAW/HUNDSUN/", "L2MD_RAW_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/L2MD_RAW/XSPEEDL2/", "L2MD_RAW_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/L2MD_RAW/FEMAS/", "L2MD_RAW_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/L2MD_RAW/EXANICSNIFFER/", "L2MD_RAW_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getL2IndexJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/L2Index/LTS/", "L2INDEX_LTS"};
		case 6:
			return {"/shared/kungfu/journal/L2Index/XELE/", "L2INDEX_XELE"};
		case 1:
			return {"/shared/kungfu/journal/L2Index/CTP/", "L2INDEX_CTP"};
		case 5:
			return {"/shared/kungfu/journal/L2Index/XSPEED/", "L2INDEX_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/L2Index/OES/", "L2INDEX_OES"};
		case 8:
			return {"/shared/kungfu/journal/L2Index/YISHENG/", "L2INDEX_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/L2Index/SOCKETSNIFFER/", "L2INDEX_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/L2Index/XONE/", "L2INDEX_XONE"};
		case 14:
			return {"/shared/kungfu/journal/L2Index/SANDBOX/", "L2INDEX_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/L2Index/HUNDSUN/", "L2INDEX_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/L2Index/XSPEEDL2/", "L2INDEX_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/L2Index/FEMAS/", "L2INDEX_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/L2Index/EXANICSNIFFER/", "L2INDEX_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getL2IndexRawJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/L2Index_RAW/LTS/", "L2INDEX_RAW_LTS"};
		case 6:
			return {"/shared/kungfu/journal/L2Index_RAW/XELE/", "L2INDEX_RAW_XELE"};
		case 1:
			return {"/shared/kungfu/journal/L2Index_RAW/CTP/", "L2INDEX_RAW_CTP"};
		case 5:
			return {"/shared/kungfu/journal/L2Index_RAW/XSPEED/", "L2INDEX_RAW_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/L2Index_RAW/OES/", "L2INDEX_RAW_OES"};
		case 8:
			return {"/shared/kungfu/journal/L2Index_RAW/YISHENG/", "L2INDEX_RAW_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/L2Index_RAW/SOCKETSNIFFER/", "L2INDEX_RAW_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/L2Index_RAW/XONE/", "L2INDEX_RAW_XONE"};
		case 14:
			return {"/shared/kungfu/journal/L2Index_RAW/SANDBOX/", "L2INDEX_RAW_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/L2Index_RAW/HUNDSUN/", "L2INDEX_RAW_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/L2Index_RAW/XSPEEDL2/", "L2INDEX_RAW_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/L2Index_RAW/FEMAS/", "L2INDEX_RAW_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/L2Index_RAW/EXANICSNIFFER/", "L2INDEX_RAW_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getL2OrderJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/L2Order/LTS/", "L2ORDER_LTS"};
		case 6:
			return {"/shared/kungfu/journal/L2Order/XELE/", "L2ORDER_XELE"};
		case 1:
			return {"/shared/kungfu/journal/L2Order/CTP/", "L2ORDER_CTP"};
		case 5:
			return {"/shared/kungfu/journal/L2Order/XSPEED/", "L2ORDER_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/L2Order/OES/", "L2ORDER_OES"};
		case 8:
			return {"/shared/kungfu/journal/L2Order/YISHENG/", "L2ORDER_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/L2Order/SOCKETSNIFFER/", "L2ORDER_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/L2Order/XONE/", "L2ORDER_XONE"};
		case 14:
			return {"/shared/kungfu/journal/L2Order/SANDBOX/", "L2ORDER_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/L2Order/HUNDSUN/", "L2ORDER_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/L2Order/XSPEEDL2/", "L2ORDER_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/L2Order/FEMAS/", "L2ORDER_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/L2Order/EXANICSNIFFER/", "L2ORDER_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getL2OrderRawJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/L2Order_RAW/LTS/", "L2ORDER_RAW_LTS"};
		case 6:
			return {"/shared/kungfu/journal/L2Order_RAW/XELE/", "L2ORDER_RAW_XELE"};
		case 1:
			return {"/shared/kungfu/journal/L2Order_RAW/CTP/", "L2ORDER_RAW_CTP"};
		case 5:
			return {"/shared/kungfu/journal/L2Order_RAW/XSPEED/", "L2ORDER_RAW_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/L2Order_RAW/OES/", "L2ORDER_RAW_OES"};
		case 8:
			return {"/shared/kungfu/journal/L2Order_RAW/YISHENG/", "L2ORDER_RAW_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/L2Order_RAW/SOCKETSNIFFER/", "L2ORDER_RAW_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/L2Order_RAW/XONE/", "L2ORDER_RAW_XONE"};
		case 14:
			return {"/shared/kungfu/journal/L2Order_RAW/SANDBOX/", "L2ORDER_RAW_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/L2Order_RAW/HUNDSUN/", "L2ORDER_RAW_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/L2Order_RAW/XSPEEDL2/", "L2ORDER_RAW_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/L2Order_RAW/FEMAS/", "L2ORDER_RAW_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/L2Order_RAW/EXANICSNIFFER/", "L2ORDER_RAW_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getL2TradeJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/L2Trade/LTS/", "L2TRADE_LTS"};
		case 6:
			return {"/shared/kungfu/journal/L2Trade/XELE/", "L2TRADE_XELE"};
		case 1:
			return {"/shared/kungfu/journal/L2Trade/CTP/", "L2TRADE_CTP"};
		case 5:
			return {"/shared/kungfu/journal/L2Trade/XSPEED/", "L2TRADE_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/L2Trade/OES/", "L2TRADE_OES"};
		case 8:
			return {"/shared/kungfu/journal/L2Trade/YISHENG/", "L2TRADE_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/L2Trade/SOCKETSNIFFER/", "L2TRADE_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/L2Trade/XONE/", "L2TRADE_XONE"};
		case 14:
			return {"/shared/kungfu/journal/L2Trade/SANDBOX/", "L2TRADE_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/L2Trade/HUNDSUN/", "L2TRADE_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/L2Trade/XSPEEDL2/", "L2TRADE_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/L2Trade/FEMAS/", "L2TRADE_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/L2Trade/EXANICSNIFFER/", "L2TRADE_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline JournalPair getL2TradeRawJournalPair(short source)
{
	switch(source)
	{
		case 2:
			return {"/shared/kungfu/journal/L2Trade_RAW/LTS/", "L2TRADE_RAW_LTS"};
		case 6:
			return {"/shared/kungfu/journal/L2Trade_RAW/XELE/", "L2TRADE_RAW_XELE"};
		case 1:
			return {"/shared/kungfu/journal/L2Trade_RAW/CTP/", "L2TRADE_RAW_CTP"};
		case 5:
			return {"/shared/kungfu/journal/L2Trade_RAW/XSPEED/", "L2TRADE_RAW_XSPEED"};
		case 13:
			return {"/shared/kungfu/journal/L2Trade_RAW/OES/", "L2TRADE_RAW_OES"};
		case 8:
			return {"/shared/kungfu/journal/L2Trade_RAW/YISHENG/", "L2TRADE_RAW_YISHENG"};
		case 11:
			return {"/shared/kungfu/journal/L2Trade_RAW/SOCKETSNIFFER/", "L2TRADE_RAW_SOCKETSNIFFER"};
		case 4:
			return {"/shared/kungfu/journal/L2Trade_RAW/XONE/", "L2TRADE_RAW_XONE"};
		case 14:
			return {"/shared/kungfu/journal/L2Trade_RAW/SANDBOX/", "L2TRADE_RAW_SANDBOX"};
		case 10:
			return {"/shared/kungfu/journal/L2Trade_RAW/HUNDSUN/", "L2TRADE_RAW_HUNDSUN"};
		case 7:
			return {"/shared/kungfu/journal/L2Trade_RAW/XSPEEDL2/", "L2TRADE_RAW_XSPEEDL2"};
		case 3:
			return {"/shared/kungfu/journal/L2Trade_RAW/FEMAS/", "L2TRADE_RAW_FEMAS"};
		case 12:
			return {"/shared/kungfu/journal/L2Trade_RAW/EXANICSNIFFER/", "L2TRADE_RAW_EXANICSNIFFER"};
		default:
			return {"", ""};
	}
}

inline std::string getLfActionFlagType(char data)
{
	switch(data)
	{
		case '1':
			return "Suspend";
		case '0':
			return "Delete";
		case '3':
			return "Modify";
		case '2':
			return "Active";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfDirectionType(char data)
{
	switch(data)
	{
		case '1':
			return "Sell";
		case '0':
			return "Buy";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfYsOrderStateType(char data)
{
	switch(data)
	{
		case 'A':
			return "YsLeftDeleted";
		case 'C':
			return "YsDeleted";
		case 'B':
			return "YsFail";
		case 'E':
			return "YsDeletedForExpire";
		case 'D':
			return "YsSuppended";
		case 'G':
			return "YsApply";
		case 'F':
			return "YsEffect";
		case '1':
			return "YsAccept";
		case '0':
			return "YsSubmit";
		case '3':
			return "YsExctriggering";
		case '2':
			return "YsTriggering";
		case '5':
			return "YsPartFinished";
		case '4':
			return "YsQueued";
		case '7':
			return "YsCanceling";
		case '6':
			return "YsFinished";
		case '9':
			return "YsCanceled";
		case '8':
			return "YsModifying";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfYsPositionEffectType(char data)
{
	switch(data)
	{
		case 'C':
			return "YsClose";
		case 'T':
			return "YsCloseToday";
		case 'O':
			return "YsOpen";
		case 'N':
			return "YsNon";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfOrderPriceTypeType(char data)
{
	switch(data)
	{
		case '1':
			return "AnyPrice";
		case '3':
			return "BestPrice";
		case '2':
			return "LimitPrice";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfForceCloseReasonType(char data)
{
	switch(data)
	{
		case '1':
			return "LackDeposit";
		case '0':
			return "NotForceClose";
		case '3':
			return "MemberOverPositionLimit";
		case '2':
			return "ClientOverPositionLimit";
		case '5':
			return "Violation";
		case '4':
			return "NotMultiple";
		case '7':
			return "PersonDeliv";
		case '6':
			return "Other";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfOffsetFlagType(char data)
{
	switch(data)
	{
		case 'N':
			return "Non";
		case '1':
			return "Close";
		case '0':
			return "Open";
		case '3':
			return "CloseToday";
		case '2':
			return "ForceClose";
		case '5':
			return "ForceOff";
		case '4':
			return "CloseYesterday";
		case '6':
			return "LocalForceClose";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfContingentConditionType(char data)
{
	switch(data)
	{
		case 'A':
			return "AskPriceGreaterEqualStopPrice";
		case 'C':
			return "AskPriceLesserEqualStopPrice";
		case 'B':
			return "AskPriceLesserThanStopPrice";
		case 'E':
			return "BidPriceGreaterEqualStopPrice";
		case 'D':
			return "BidPriceGreaterThanStopPrice";
		case 'F':
			return "BidPriceLesserThanStopPrice";
		case 'H':
			return "BidPriceLesserEqualStopPrice";
		case '1':
			return "Immediately";
		case '3':
			return "TouchProfit";
		case '2':
			return "Touch";
		case '5':
			return "LastPriceGreaterThanStopPrice";
		case '4':
			return "ParkedOrder";
		case '7':
			return "LastPriceLesserThanStopPrice";
		case '6':
			return "LastPriceGreaterEqualStopPrice";
		case '9':
			return "AskPriceGreaterThanStopPrice";
		case '8':
			return "LastPriceLesserEqualStopPrice";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfVolumeConditionType(char data)
{
	switch(data)
	{
		case '1':
			return "AV";
		case '3':
			return "CV";
		case '2':
			return "MV";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfHedgeFlagType(char data)
{
	switch(data)
	{
		case '1':
			return "Speculation";
		case '9':
			return "AllValue";
		case '3':
			return "Hedge";
		case '2':
			return "Argitrage";
		case '4':
			return "MarketMaker";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfTimeConditionType(char data)
{
	switch(data)
	{
		case 'A':
			return "FAK";
		case 'O':
			return "FOK";
		case '1':
			return "IOC";
		case '3':
			return "GFD";
		case '2':
			return "GFS";
		case '5':
			return "GTC";
		case '4':
			return "GTD";
		case '6':
			return "GFA";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfYsSideTypeType(char data)
{
	switch(data)
	{
		case 'A':
			return "YsAll";
		case 'S':
			return "YsSell";
		case 'B':
			return "YsBuy";
		case 'N':
			return "YsNon";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfYsTimeConditionType(char data)
{
	switch(data)
	{
		case '1':
			return "YsGTC";
		case '0':
			return "YsGFD";
		case '3':
			return "YsFAK";
		case '2':
			return "YsGTD";
		case '4':
			return "YsFOK";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfPositionDateType(char data)
{
	switch(data)
	{
		case '1':
			return "Today";
		case '3':
			return "Both";
		case '2':
			return "History";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfYsHedgeFlagType(char data)
{
	switch(data)
	{
		case 'N':
			return "YsNon";
		case 'B':
			return "YsB";
		case 'T':
			return "YsT";
		case 'L':
			return "YsL";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfPosiDirectionType(char data)
{
	switch(data)
	{
		case '1':
			return "Net";
		case '3':
			return "Short";
		case '2':
			return "Long";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfOrderStatusType(char data)
{
	switch(data)
	{
		case 'a':
			return "Unknown";
		case 'c':
			return "Touched";
		case 'b':
			return "NotTouched";
		case 'd':
			return "Error";
		case 'i':
			return "OrderInserted";
		case 'j':
			return "OrderAccepted";
		case '1':
			return "PartTradedQueueing";
		case '0':
			return "AllTraded";
		case '3':
			return "NoTradeQueueing";
		case '2':
			return "PartTradedNotQueueing";
		case '5':
			return "Canceled";
		case '4':
			return "NoTradeNotQueueing";
		case '6':
			return "AcceptedNoReply";
		default:
			return "UnExpected!";
	};
}

inline std::string getLfYsOrderTypeType(char data)
{
	switch(data)
	{
		case '1':
			return "YsMarket";
		case '2':
			return "YsLimit";
		default:
			return "UnExpected!";
	};
}
#endif
